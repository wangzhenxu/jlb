<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="CustomerRole">

   <resultMap type="com.timeloit.pojo.CustomerRole" id="CustomerRoleMap">
		<id  column="role_id" property="roleId"/>
		<result column="role_name" property="roleName"/>
		<result column="role_str" property="roleStr"/>
		<result column="project_id" property="projectId"/>
	</resultMap>

	<resultMap type="CustomerRole" id="role">
		<id column="role_id" property="roleId" />
		<result column="role_name" property="roleName" />
		<result column="role_str" property="roleStr" />
		<result column="project_id" property="projectId" />
		<result column="projectName" property="projectName" />
		<result column="parent_role_id" property="parentRoleId" />
	</resultMap>


	<resultMap type="CustomerRole" id="rolePermission">
		<id column="role_id" property="roleId" />
		<result column="role_name" property="roleName" />
		<result column="role_str" property="roleStr" />
		<collection property="permissionList" ofType="CustomerPermission">
			<id column="permission_id" property="permissionId" />
			<result column="permission_name" property="permissionName" />
			<result column="permission_str" property="permissionStr" />
		</collection>
	</resultMap>

	<!-- 删除权限 -->
	<delete id="deletePermission">
		delete from customer_role_permission where role_id=#{roleId}
	</delete>

	<!-- 新增角色 -->
	<insert id="addPermission">
		insert into
		customer_role_permission(role_id,permission_id)
		values(#{roleId},#{permissionId})
	</insert>


	<!-- 新增角色 -->
	<insert id="addRole" parameterType="Role">
		insert into
		customer_role(role_name,role_str,project_id)
		values(#{roleName},#{roleStr},#{projectId})
		<selectKey resultType="long" keyProperty="roleId" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>

	<!-- 删除角色 -->
	<delete id="deleteRole">
		delete from customer_role where role_id=#{roleId}
	</delete>


	<!-- 根据ID查询角色 -->
	<select id="getRoleById" resultMap="rolePermission">
		select
		r.role_id,r.role_name,r.role_str,p.permission_id,p.permission_name,p.permission_str
		from customer_role r left join
		customer_role_permission rp on r.role_id=rp.role_id
		left
		join customer_permission p on
		rp.permission_id=p.permission_id
		where
		r.role_id=#{roleId}
	</select>

	<!-- 查询角色列表 -->
	<select id="getRoleList" resultMap="role">
		select cr.*,p.name as projectName
		from customer_role cr LEFT JOIN project p ON cr.project_id = p.project_id 
		<where>
			<if test="projectId != null">
				cr.project_id=#{projectId}
			</if>
		</where>
		order by cr.role_id desc
	</select>
	
		<!-- 查询角色列表By项目 -->
	<select id="getRoleListByPro" resultMap="role">
		SELECT * from customer_role 
		<where>
			<if test="projectId != null">
				AND project_id =#{projectId}
			</if>
			<if test="roleId != null">
				AND role_id=#{roleId}
			</if>
			<if test="nroleId != null">
				AND role_id !=#{nroleId}
			</if>
		  <if test="roleIds !=null">
		         AND role_id NOT IN
			    <foreach  item="item" collection="roleIds"  index="index" open="(" separator="," close=")"> 
						 ${item} 
				</foreach>
	         </if>
		</where>
		order by role_id desc
	</select>
	

	<!-- 查询角色列表数量 -->
	<select id="getRoleListCount" resultType="int">
		select count(role_id)
		from customer_role cr
		<where>
			<if test="projectId != null">
				cr.project_id=#{projectId}
			</if>
		</where>
		order by cr.role_id desc
	</select>

	<!-- getRoleListSQL -->
	<sql id="getRoleListSQL">
		from customer_role
		<where>
			<if test="roleName != null">
				role_name like '%${roleName}%'
			</if>
		</where>
	</sql>
	
	<!-- 查询项目下的客户角色 -->
	<select id="getCustomerRoleList" resultMap="CustomerRoleMap" parameterType="Long">
		SELECT * FROM customer_role where project_id=#{projectId}
	</select>
	<!-- 根据角色ID来查询角色 -->
	<select id="getCustomerRole" resultMap="CustomerRoleMap">
		select * from customer_role where role_id=#{customerRoleId}
	</select>
	
	<!-- 根据项目代码来查询该项目的角色 -->
	<select id="getProjectRoleByCode" resultMap="CustomerRoleMap">
		select cr.* from customer_role cr,project p
		where p.code=#{code} and p.project_id=cr.project_id
	</select>
	
	<update id="updateParentRole">
		UPDATE customer_role  
		<trim prefix="set" suffixOverrides=",">
			<if test="parentRoleId != null">
					parent_role_id = #{parentRoleId}, 
			</if>
			<if test="noParentRoleId != null">
					parent_role_id = null,
			</if>
			
			<if test="projectId != null">
					project_id = #{projectId},
			</if>
			
			<if test="roleName != null">
					role_name = #{roleName},
			</if>
		</trim>
		WHERE 
		<if test="roleId != null">
				role_id=#{roleId}
		</if>
		<if test="noParentRoleId != null">
				parent_role_id like '${noParentRoleId}%'
		</if>
		
	</update>

</mapper>